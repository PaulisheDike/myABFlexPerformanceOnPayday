/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1727.0, "minX": 0.0, "maxY": 61867.0, "series": [{"data": [[0.0, 1727.0], [0.1, 2042.0], [0.2, 2043.0], [0.3, 2045.0], [0.4, 2046.0], [0.5, 2046.0], [0.6, 2046.0], [0.7, 2047.0], [0.8, 2047.0], [0.9, 2048.0], [1.0, 2048.0], [1.1, 2049.0], [1.2, 2049.0], [1.3, 2049.0], [1.4, 2049.0], [1.5, 2050.0], [1.6, 2050.0], [1.7, 2050.0], [1.8, 2050.0], [1.9, 2050.0], [2.0, 2051.0], [2.1, 2051.0], [2.2, 2051.0], [2.3, 2051.0], [2.4, 2052.0], [2.5, 2052.0], [2.6, 2052.0], [2.7, 2052.0], [2.8, 2052.0], [2.9, 2052.0], [3.0, 2053.0], [3.1, 2053.0], [3.2, 2053.0], [3.3, 2053.0], [3.4, 2054.0], [3.5, 2054.0], [3.6, 2054.0], [3.7, 2054.0], [3.8, 2055.0], [3.9, 2055.0], [4.0, 2055.0], [4.1, 2055.0], [4.2, 2055.0], [4.3, 2055.0], [4.4, 2055.0], [4.5, 2055.0], [4.6, 2055.0], [4.7, 2056.0], [4.8, 2056.0], [4.9, 2056.0], [5.0, 2056.0], [5.1, 2056.0], [5.2, 2056.0], [5.3, 2056.0], [5.4, 2056.0], [5.5, 2056.0], [5.6, 2056.0], [5.7, 2056.0], [5.8, 2057.0], [5.9, 2057.0], [6.0, 2057.0], [6.1, 2057.0], [6.2, 2057.0], [6.3, 2057.0], [6.4, 2058.0], [6.5, 2058.0], [6.6, 2058.0], [6.7, 2058.0], [6.8, 2058.0], [6.9, 2058.0], [7.0, 2058.0], [7.1, 2058.0], [7.2, 2058.0], [7.3, 2058.0], [7.4, 2058.0], [7.5, 2059.0], [7.6, 2059.0], [7.7, 2059.0], [7.8, 2059.0], [7.9, 2059.0], [8.0, 2059.0], [8.1, 2059.0], [8.2, 2059.0], [8.3, 2059.0], [8.4, 2059.0], [8.5, 2059.0], [8.6, 2059.0], [8.7, 2060.0], [8.8, 2060.0], [8.9, 2060.0], [9.0, 2060.0], [9.1, 2060.0], [9.2, 2060.0], [9.3, 2060.0], [9.4, 2060.0], [9.5, 2060.0], [9.6, 2060.0], [9.7, 2060.0], [9.8, 2060.0], [9.9, 2060.0], [10.0, 2061.0], [10.1, 2061.0], [10.2, 2061.0], [10.3, 2061.0], [10.4, 2061.0], [10.5, 2061.0], [10.6, 2061.0], [10.7, 2061.0], [10.8, 2061.0], [10.9, 2062.0], [11.0, 2062.0], [11.1, 2062.0], [11.2, 2062.0], [11.3, 2062.0], [11.4, 2062.0], [11.5, 2062.0], [11.6, 2062.0], [11.7, 2062.0], [11.8, 2062.0], [11.9, 2063.0], [12.0, 2063.0], [12.1, 2063.0], [12.2, 2063.0], [12.3, 2063.0], [12.4, 2063.0], [12.5, 2063.0], [12.6, 2063.0], [12.7, 2063.0], [12.8, 2063.0], [12.9, 2063.0], [13.0, 2063.0], [13.1, 2063.0], [13.2, 2063.0], [13.3, 2064.0], [13.4, 2064.0], [13.5, 2064.0], [13.6, 2064.0], [13.7, 2064.0], [13.8, 2064.0], [13.9, 2064.0], [14.0, 2064.0], [14.1, 2064.0], [14.2, 2064.0], [14.3, 2064.0], [14.4, 2064.0], [14.5, 2065.0], [14.6, 2065.0], [14.7, 2065.0], [14.8, 2065.0], [14.9, 2065.0], [15.0, 2065.0], [15.1, 2065.0], [15.2, 2065.0], [15.3, 2065.0], [15.4, 2065.0], [15.5, 2065.0], [15.6, 2066.0], [15.7, 2066.0], [15.8, 2066.0], [15.9, 2066.0], [16.0, 2066.0], [16.1, 2066.0], [16.2, 2066.0], [16.3, 2066.0], [16.4, 2066.0], [16.5, 2066.0], [16.6, 2066.0], [16.7, 2066.0], [16.8, 2066.0], [16.9, 2067.0], [17.0, 2067.0], [17.1, 2067.0], [17.2, 2067.0], [17.3, 2067.0], [17.4, 2067.0], [17.5, 2067.0], [17.6, 2067.0], [17.7, 2067.0], [17.8, 2067.0], [17.9, 2067.0], [18.0, 2067.0], [18.1, 2067.0], [18.2, 2067.0], [18.3, 2068.0], [18.4, 2068.0], [18.5, 2068.0], [18.6, 2068.0], [18.7, 2068.0], [18.8, 2068.0], [18.9, 2068.0], [19.0, 2068.0], [19.1, 2068.0], [19.2, 2068.0], [19.3, 2068.0], [19.4, 2068.0], [19.5, 2068.0], [19.6, 2069.0], [19.7, 2069.0], [19.8, 2069.0], [19.9, 2069.0], [20.0, 2069.0], [20.1, 2069.0], [20.2, 2069.0], [20.3, 2069.0], [20.4, 2069.0], [20.5, 2069.0], [20.6, 2070.0], [20.7, 2070.0], [20.8, 2070.0], [20.9, 2070.0], [21.0, 2070.0], [21.1, 2070.0], [21.2, 2070.0], [21.3, 2070.0], [21.4, 2070.0], [21.5, 2070.0], [21.6, 2070.0], [21.7, 2070.0], [21.8, 2070.0], [21.9, 2071.0], [22.0, 2071.0], [22.1, 2071.0], [22.2, 2071.0], [22.3, 2071.0], [22.4, 2071.0], [22.5, 2071.0], [22.6, 2071.0], [22.7, 2071.0], [22.8, 2071.0], [22.9, 2071.0], [23.0, 2071.0], [23.1, 2071.0], [23.2, 2071.0], [23.3, 2071.0], [23.4, 2072.0], [23.5, 2072.0], [23.6, 2072.0], [23.7, 2072.0], [23.8, 2072.0], [23.9, 2072.0], [24.0, 2072.0], [24.1, 2072.0], [24.2, 2072.0], [24.3, 2072.0], [24.4, 2072.0], [24.5, 2073.0], [24.6, 2073.0], [24.7, 2073.0], [24.8, 2073.0], [24.9, 2073.0], [25.0, 2073.0], [25.1, 2073.0], [25.2, 2073.0], [25.3, 2073.0], [25.4, 2073.0], [25.5, 2073.0], [25.6, 2074.0], [25.7, 2074.0], [25.8, 2074.0], [25.9, 2074.0], [26.0, 2074.0], [26.1, 2074.0], [26.2, 2074.0], [26.3, 2074.0], [26.4, 2074.0], [26.5, 2074.0], [26.6, 2074.0], [26.7, 2075.0], [26.8, 2075.0], [26.9, 2075.0], [27.0, 2075.0], [27.1, 2075.0], [27.2, 2075.0], [27.3, 2075.0], [27.4, 2075.0], [27.5, 2075.0], [27.6, 2075.0], [27.7, 2076.0], [27.8, 2076.0], [27.9, 2076.0], [28.0, 2076.0], [28.1, 2076.0], [28.2, 2076.0], [28.3, 2076.0], [28.4, 2076.0], [28.5, 2076.0], [28.6, 2076.0], [28.7, 2077.0], [28.8, 2077.0], [28.9, 2077.0], [29.0, 2077.0], [29.1, 2077.0], [29.2, 2077.0], [29.3, 2077.0], [29.4, 2077.0], [29.5, 2077.0], [29.6, 2077.0], [29.7, 2077.0], [29.8, 2078.0], [29.9, 2078.0], [30.0, 2078.0], [30.1, 2078.0], [30.2, 2078.0], [30.3, 2078.0], [30.4, 2078.0], [30.5, 2078.0], [30.6, 2078.0], [30.7, 2078.0], [30.8, 2078.0], [30.9, 2078.0], [31.0, 2078.0], [31.1, 2078.0], [31.2, 2079.0], [31.3, 2079.0], [31.4, 2079.0], [31.5, 2079.0], [31.6, 2079.0], [31.7, 2079.0], [31.8, 2079.0], [31.9, 2080.0], [32.0, 2080.0], [32.1, 2080.0], [32.2, 2080.0], [32.3, 2080.0], [32.4, 2080.0], [32.5, 2080.0], [32.6, 2080.0], [32.7, 2080.0], [32.8, 2080.0], [32.9, 2080.0], [33.0, 2081.0], [33.1, 2081.0], [33.2, 2081.0], [33.3, 2081.0], [33.4, 2081.0], [33.5, 2081.0], [33.6, 2081.0], [33.7, 2081.0], [33.8, 2082.0], [33.9, 2082.0], [34.0, 2082.0], [34.1, 2082.0], [34.2, 2082.0], [34.3, 2082.0], [34.4, 2082.0], [34.5, 2082.0], [34.6, 2083.0], [34.7, 2083.0], [34.8, 2083.0], [34.9, 2083.0], [35.0, 2083.0], [35.1, 2083.0], [35.2, 2083.0], [35.3, 2084.0], [35.4, 2084.0], [35.5, 2084.0], [35.6, 2084.0], [35.7, 2084.0], [35.8, 2084.0], [35.9, 2084.0], [36.0, 2084.0], [36.1, 2084.0], [36.2, 2085.0], [36.3, 2085.0], [36.4, 2085.0], [36.5, 2085.0], [36.6, 2085.0], [36.7, 2085.0], [36.8, 2085.0], [36.9, 2085.0], [37.0, 2085.0], [37.1, 2086.0], [37.2, 2086.0], [37.3, 2086.0], [37.4, 2086.0], [37.5, 2086.0], [37.6, 2086.0], [37.7, 2086.0], [37.8, 2086.0], [37.9, 2086.0], [38.0, 2086.0], [38.1, 2087.0], [38.2, 2087.0], [38.3, 2087.0], [38.4, 2087.0], [38.5, 2087.0], [38.6, 2087.0], [38.7, 2087.0], [38.8, 2088.0], [38.9, 2088.0], [39.0, 2088.0], [39.1, 2088.0], [39.2, 2088.0], [39.3, 2088.0], [39.4, 2089.0], [39.5, 2089.0], [39.6, 2089.0], [39.7, 2089.0], [39.8, 2089.0], [39.9, 2090.0], [40.0, 2090.0], [40.1, 2090.0], [40.2, 2090.0], [40.3, 2090.0], [40.4, 2091.0], [40.5, 2091.0], [40.6, 2091.0], [40.7, 2091.0], [40.8, 2091.0], [40.9, 2092.0], [41.0, 2092.0], [41.1, 2092.0], [41.2, 2092.0], [41.3, 2093.0], [41.4, 2093.0], [41.5, 2093.0], [41.6, 2093.0], [41.7, 2093.0], [41.8, 2094.0], [41.9, 2094.0], [42.0, 2094.0], [42.1, 2095.0], [42.2, 2095.0], [42.3, 2095.0], [42.4, 2095.0], [42.5, 2096.0], [42.6, 2096.0], [42.7, 2096.0], [42.8, 2097.0], [42.9, 2097.0], [43.0, 2097.0], [43.1, 2098.0], [43.2, 2098.0], [43.3, 2098.0], [43.4, 2099.0], [43.5, 2099.0], [43.6, 2100.0], [43.7, 2100.0], [43.8, 2101.0], [43.9, 2101.0], [44.0, 2102.0], [44.1, 2103.0], [44.2, 2104.0], [44.3, 2106.0], [44.4, 2106.0], [44.5, 2107.0], [44.6, 2108.0], [44.7, 2108.0], [44.8, 2110.0], [44.9, 2111.0], [45.0, 2113.0], [45.1, 2117.0], [45.2, 2119.0], [45.3, 2121.0], [45.4, 2127.0], [45.5, 2131.0], [45.6, 2134.0], [45.7, 2160.0], [45.8, 2258.0], [45.9, 2372.0], [46.0, 2577.0], [46.1, 2726.0], [46.2, 2776.0], [46.3, 2831.0], [46.4, 2868.0], [46.5, 2945.0], [46.6, 3010.0], [46.7, 3058.0], [46.8, 3129.0], [46.9, 3587.0], [47.0, 5421.0], [47.1, 7404.0], [47.2, 10901.0], [47.3, 11508.0], [47.4, 11856.0], [47.5, 12823.0], [47.6, 13188.0], [47.7, 14417.0], [47.8, 15596.0], [47.9, 15899.0], [48.0, 16111.0], [48.1, 16578.0], [48.2, 16804.0], [48.3, 16834.0], [48.4, 17343.0], [48.5, 17531.0], [48.6, 17729.0], [48.7, 18371.0], [48.8, 18640.0], [48.9, 18810.0], [49.0, 19250.0], [49.1, 19564.0], [49.2, 19768.0], [49.3, 20414.0], [49.4, 20852.0], [49.5, 21862.0], [49.6, 22782.0], [49.7, 23654.0], [49.8, 25057.0], [49.9, 25860.0], [50.0, 26757.0], [50.1, 27504.0], [50.2, 27874.0], [50.3, 28028.0], [50.4, 28224.0], [50.5, 28695.0], [50.6, 28816.0], [50.7, 28929.0], [50.8, 29160.0], [50.9, 29432.0], [51.0, 29866.0], [51.1, 30212.0], [51.2, 31630.0], [51.3, 31787.0], [51.4, 32338.0], [51.5, 32593.0], [51.6, 33545.0], [51.7, 33652.0], [51.8, 33985.0], [51.9, 34099.0], [52.0, 34585.0], [52.1, 35064.0], [52.2, 35674.0], [52.3, 35958.0], [52.4, 36057.0], [52.5, 36180.0], [52.6, 36326.0], [52.7, 36430.0], [52.8, 36462.0], [52.9, 36513.0], [53.0, 36689.0], [53.1, 36785.0], [53.2, 37088.0], [53.3, 37294.0], [53.4, 37847.0], [53.5, 38501.0], [53.6, 39627.0], [53.7, 40109.0], [53.8, 40794.0], [53.9, 41029.0], [54.0, 41229.0], [54.1, 41298.0], [54.2, 41397.0], [54.3, 41626.0], [54.4, 42132.0], [54.5, 42890.0], [54.6, 43142.0], [54.7, 43403.0], [54.8, 43535.0], [54.9, 43741.0], [55.0, 44053.0], [55.1, 44143.0], [55.2, 44282.0], [55.3, 44479.0], [55.4, 44606.0], [55.5, 45104.0], [55.6, 45194.0], [55.7, 45357.0], [55.8, 45503.0], [55.9, 45616.0], [56.0, 45769.0], [56.1, 45969.0], [56.2, 46043.0], [56.3, 46267.0], [56.4, 46372.0], [56.5, 46419.0], [56.6, 46495.0], [56.7, 46614.0], [56.8, 46666.0], [56.9, 46908.0], [57.0, 46961.0], [57.1, 46993.0], [57.2, 47064.0], [57.3, 47092.0], [57.4, 47137.0], [57.5, 47197.0], [57.6, 47223.0], [57.7, 47240.0], [57.8, 47301.0], [57.9, 47368.0], [58.0, 47411.0], [58.1, 47456.0], [58.2, 47551.0], [58.3, 47592.0], [58.4, 47631.0], [58.5, 47685.0], [58.6, 47704.0], [58.7, 47766.0], [58.8, 47784.0], [58.9, 47819.0], [59.0, 47878.0], [59.1, 47892.0], [59.2, 47916.0], [59.3, 47953.0], [59.4, 48014.0], [59.5, 48056.0], [59.6, 48091.0], [59.7, 48136.0], [59.8, 48178.0], [59.9, 48268.0], [60.0, 48313.0], [60.1, 48389.0], [60.2, 48429.0], [60.3, 48457.0], [60.4, 48560.0], [60.5, 48600.0], [60.6, 48657.0], [60.7, 48671.0], [60.8, 48710.0], [60.9, 48718.0], [61.0, 48740.0], [61.1, 48800.0], [61.2, 48824.0], [61.3, 48882.0], [61.4, 48912.0], [61.5, 48941.0], [61.6, 48959.0], [61.7, 48988.0], [61.8, 49028.0], [61.9, 49116.0], [62.0, 49134.0], [62.1, 49150.0], [62.2, 49169.0], [62.3, 49195.0], [62.4, 49237.0], [62.5, 49301.0], [62.6, 49318.0], [62.7, 49340.0], [62.8, 49403.0], [62.9, 49415.0], [63.0, 49470.0], [63.1, 49505.0], [63.2, 49537.0], [63.3, 49588.0], [63.4, 49607.0], [63.5, 49697.0], [63.6, 49783.0], [63.7, 49812.0], [63.8, 49824.0], [63.9, 49861.0], [64.0, 49892.0], [64.1, 49943.0], [64.2, 49956.0], [64.3, 49973.0], [64.4, 50030.0], [64.5, 50073.0], [64.6, 50111.0], [64.7, 50130.0], [64.8, 50171.0], [64.9, 50189.0], [65.0, 50219.0], [65.1, 50240.0], [65.2, 50262.0], [65.3, 50304.0], [65.4, 50320.0], [65.5, 50361.0], [65.6, 50373.0], [65.7, 50386.0], [65.8, 50410.0], [65.9, 50443.0], [66.0, 50494.0], [66.1, 50498.0], [66.2, 50535.0], [66.3, 50575.0], [66.4, 50595.0], [66.5, 50617.0], [66.6, 50649.0], [66.7, 50678.0], [66.8, 50690.0], [66.9, 50722.0], [67.0, 50762.0], [67.1, 50797.0], [67.2, 50827.0], [67.3, 50861.0], [67.4, 50877.0], [67.5, 50892.0], [67.6, 50901.0], [67.7, 50923.0], [67.8, 50957.0], [67.9, 50970.0], [68.0, 50982.0], [68.1, 51003.0], [68.2, 51024.0], [68.3, 51041.0], [68.4, 51071.0], [68.5, 51092.0], [68.6, 51128.0], [68.7, 51140.0], [68.8, 51150.0], [68.9, 51202.0], [69.0, 51232.0], [69.1, 51256.0], [69.2, 51280.0], [69.3, 51307.0], [69.4, 51325.0], [69.5, 51345.0], [69.6, 51393.0], [69.7, 51414.0], [69.8, 51423.0], [69.9, 51453.0], [70.0, 51520.0], [70.1, 51537.0], [70.2, 51556.0], [70.3, 51563.0], [70.4, 51574.0], [70.5, 51600.0], [70.6, 51624.0], [70.7, 51643.0], [70.8, 51675.0], [70.9, 51695.0], [71.0, 51705.0], [71.1, 51724.0], [71.2, 51754.0], [71.3, 51766.0], [71.4, 51784.0], [71.5, 51799.0], [71.6, 51829.0], [71.7, 51848.0], [71.8, 51865.0], [71.9, 51893.0], [72.0, 51923.0], [72.1, 51939.0], [72.2, 51956.0], [72.3, 51962.0], [72.4, 51996.0], [72.5, 52011.0], [72.6, 52061.0], [72.7, 52072.0], [72.8, 52096.0], [72.9, 52115.0], [73.0, 52141.0], [73.1, 52144.0], [73.2, 52158.0], [73.3, 52186.0], [73.4, 52197.0], [73.5, 52223.0], [73.6, 52235.0], [73.7, 52267.0], [73.8, 52276.0], [73.9, 52285.0], [74.0, 52299.0], [74.1, 52307.0], [74.2, 52332.0], [74.3, 52349.0], [74.4, 52371.0], [74.5, 52414.0], [74.6, 52430.0], [74.7, 52458.0], [74.8, 52464.0], [74.9, 52474.0], [75.0, 52489.0], [75.1, 52504.0], [75.2, 52522.0], [75.3, 52542.0], [75.4, 52558.0], [75.5, 52577.0], [75.6, 52602.0], [75.7, 52642.0], [75.8, 52654.0], [75.9, 52664.0], [76.0, 52682.0], [76.1, 52705.0], [76.2, 52712.0], [76.3, 52718.0], [76.4, 52734.0], [76.5, 52745.0], [76.6, 52779.0], [76.7, 52791.0], [76.8, 52804.0], [76.9, 52811.0], [77.0, 52829.0], [77.1, 52865.0], [77.2, 52870.0], [77.3, 52877.0], [77.4, 52888.0], [77.5, 52907.0], [77.6, 52929.0], [77.7, 52961.0], [77.8, 52975.0], [77.9, 52988.0], [78.0, 53000.0], [78.1, 53016.0], [78.2, 53038.0], [78.3, 53045.0], [78.4, 53071.0], [78.5, 53091.0], [78.6, 53102.0], [78.7, 53115.0], [78.8, 53135.0], [78.9, 53169.0], [79.0, 53192.0], [79.1, 53203.0], [79.2, 53212.0], [79.3, 53216.0], [79.4, 53231.0], [79.5, 53258.0], [79.6, 53271.0], [79.7, 53293.0], [79.8, 53300.0], [79.9, 53316.0], [80.0, 53347.0], [80.1, 53397.0], [80.2, 53408.0], [80.3, 53426.0], [80.4, 53439.0], [80.5, 53448.0], [80.6, 53475.0], [80.7, 53500.0], [80.8, 53516.0], [80.9, 53528.0], [81.0, 53539.0], [81.1, 53566.0], [81.2, 53586.0], [81.3, 53629.0], [81.4, 53639.0], [81.5, 53685.0], [81.6, 53713.0], [81.7, 53751.0], [81.8, 53769.0], [81.9, 53798.0], [82.0, 53869.0], [82.1, 53878.0], [82.2, 53916.0], [82.3, 53958.0], [82.4, 53969.0], [82.5, 53990.0], [82.6, 54015.0], [82.7, 54030.0], [82.8, 54041.0], [82.9, 54089.0], [83.0, 54091.0], [83.1, 54134.0], [83.2, 54161.0], [83.3, 54194.0], [83.4, 54207.0], [83.5, 54226.0], [83.6, 54232.0], [83.7, 54267.0], [83.8, 54283.0], [83.9, 54316.0], [84.0, 54373.0], [84.1, 54426.0], [84.2, 54450.0], [84.3, 54460.0], [84.4, 54464.0], [84.5, 54487.0], [84.6, 54501.0], [84.7, 54518.0], [84.8, 54540.0], [84.9, 54559.0], [85.0, 54600.0], [85.1, 54609.0], [85.2, 54616.0], [85.3, 54635.0], [85.4, 54644.0], [85.5, 54648.0], [85.6, 54665.0], [85.7, 54672.0], [85.8, 54694.0], [85.9, 54710.0], [86.0, 54735.0], [86.1, 54745.0], [86.2, 54756.0], [86.3, 54774.0], [86.4, 54796.0], [86.5, 54805.0], [86.6, 54808.0], [86.7, 54826.0], [86.8, 54832.0], [86.9, 54869.0], [87.0, 54886.0], [87.1, 54895.0], [87.2, 54935.0], [87.3, 54956.0], [87.4, 54981.0], [87.5, 55024.0], [87.6, 55033.0], [87.7, 55038.0], [87.8, 55083.0], [87.9, 55102.0], [88.0, 55108.0], [88.1, 55131.0], [88.2, 55163.0], [88.3, 55192.0], [88.4, 55208.0], [88.5, 55266.0], [88.6, 55292.0], [88.7, 55317.0], [88.8, 55341.0], [88.9, 55368.0], [89.0, 55392.0], [89.1, 55518.0], [89.2, 55548.0], [89.3, 55571.0], [89.4, 55592.0], [89.5, 55612.0], [89.6, 55661.0], [89.7, 55699.0], [89.8, 55728.0], [89.9, 55734.0], [90.0, 55762.0], [90.1, 55767.0], [90.2, 55821.0], [90.3, 55857.0], [90.4, 55885.0], [90.5, 55903.0], [90.6, 55917.0], [90.7, 55945.0], [90.8, 55965.0], [90.9, 55994.0], [91.0, 56020.0], [91.1, 56042.0], [91.2, 56080.0], [91.3, 56177.0], [91.4, 56192.0], [91.5, 56232.0], [91.6, 56296.0], [91.7, 56309.0], [91.8, 56341.0], [91.9, 56389.0], [92.0, 56415.0], [92.1, 56436.0], [92.2, 56471.0], [92.3, 56516.0], [92.4, 56538.0], [92.5, 56569.0], [92.6, 56612.0], [92.7, 56672.0], [92.8, 56686.0], [92.9, 56705.0], [93.0, 56788.0], [93.1, 56836.0], [93.2, 56886.0], [93.3, 56932.0], [93.4, 56989.0], [93.5, 57010.0], [93.6, 57044.0], [93.7, 57113.0], [93.8, 57126.0], [93.9, 57162.0], [94.0, 57194.0], [94.1, 57214.0], [94.2, 57281.0], [94.3, 57301.0], [94.4, 57352.0], [94.5, 57375.0], [94.6, 57406.0], [94.7, 57420.0], [94.8, 57457.0], [94.9, 57480.0], [95.0, 57539.0], [95.1, 57571.0], [95.2, 57593.0], [95.3, 57636.0], [95.4, 57682.0], [95.5, 57709.0], [95.6, 57745.0], [95.7, 57782.0], [95.8, 57824.0], [95.9, 57889.0], [96.0, 57946.0], [96.1, 58017.0], [96.2, 58074.0], [96.3, 58128.0], [96.4, 58186.0], [96.5, 58213.0], [96.6, 58289.0], [96.7, 58301.0], [96.8, 58325.0], [96.9, 58359.0], [97.0, 58498.0], [97.1, 58539.0], [97.2, 58581.0], [97.3, 58589.0], [97.4, 58607.0], [97.5, 58649.0], [97.6, 58709.0], [97.7, 58742.0], [97.8, 58770.0], [97.9, 58788.0], [98.0, 58878.0], [98.1, 58918.0], [98.2, 58965.0], [98.3, 58978.0], [98.4, 59069.0], [98.5, 59142.0], [98.6, 59292.0], [98.7, 59357.0], [98.8, 59449.0], [98.9, 59546.0], [99.0, 59631.0], [99.1, 59832.0], [99.2, 59887.0], [99.3, 60144.0], [99.4, 60296.0], [99.5, 60397.0], [99.6, 60464.0], [99.7, 60552.0], [99.8, 60809.0], [99.9, 61128.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 1304.0, "series": [{"data": [[34500.0, 2.0], [34900.0, 1.0], [36100.0, 3.0], [36500.0, 3.0], [35700.0, 2.0], [37300.0, 2.0], [38500.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [40100.0, 2.0], [39700.0, 1.0], [40900.0, 2.0], [41300.0, 3.0], [42100.0, 2.0], [42900.0, 1.0], [43700.0, 3.0], [44100.0, 2.0], [44500.0, 2.0], [45300.0, 3.0], [46500.0, 2.0], [46900.0, 8.0], [45700.0, 1.0], [46100.0, 1.0], [47300.0, 6.0], [47700.0, 8.0], [48900.0, 14.0], [48100.0, 5.0], [48500.0, 3.0], [49300.0, 9.0], [50100.0, 11.0], [49700.0, 4.0], [50500.0, 9.0], [50900.0, 15.0], [51300.0, 11.0], [52500.0, 15.0], [51700.0, 17.0], [52100.0, 19.0], [52900.0, 17.0], [53700.0, 11.0], [53300.0, 11.0], [54500.0, 12.0], [54100.0, 9.0], [54900.0, 10.0], [55700.0, 14.0], [57300.0, 9.0], [55300.0, 12.0], [56100.0, 6.0], [56500.0, 8.0], [56900.0, 7.0], [58100.0, 7.0], [57700.0, 9.0], [58900.0, 9.0], [58500.0, 11.0], [59300.0, 4.0], [60100.0, 3.0], [59700.0, 2.0], [60500.0, 2.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 1304.0], [2100.0, 68.0], [2200.0, 3.0], [2300.0, 2.0], [2500.0, 3.0], [2600.0, 1.0], [2800.0, 5.0], [2700.0, 5.0], [2900.0, 5.0], [3000.0, 4.0], [3100.0, 4.0], [3500.0, 2.0], [4600.0, 1.0], [4900.0, 1.0], [5400.0, 1.0], [6000.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [9000.0, 1.0], [10700.0, 1.0], [10900.0, 1.0], [11200.0, 1.0], [11500.0, 2.0], [11300.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [12100.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [13100.0, 3.0], [14000.0, 1.0], [13900.0, 1.0], [14400.0, 1.0], [15000.0, 1.0], [15500.0, 2.0], [15800.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [16100.0, 2.0], [16000.0, 1.0], [16800.0, 5.0], [16400.0, 1.0], [17400.0, 2.0], [17000.0, 1.0], [17800.0, 1.0], [18400.0, 1.0], [18200.0, 1.0], [18800.0, 2.0], [19200.0, 1.0], [18600.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22800.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [23600.0, 1.0], [24200.0, 1.0], [25000.0, 2.0], [25800.0, 2.0], [27000.0, 1.0], [28000.0, 2.0], [27800.0, 2.0], [28200.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [28800.0, 4.0], [29200.0, 2.0], [29000.0, 1.0], [29400.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [30400.0, 1.0], [31600.0, 1.0], [31800.0, 1.0], [32400.0, 1.0], [34000.0, 3.0], [33600.0, 1.0], [36800.0, 2.0], [35600.0, 2.0], [36000.0, 2.0], [36400.0, 7.0], [37200.0, 3.0], [39600.0, 1.0], [39200.0, 1.0], [40400.0, 1.0], [41200.0, 5.0], [41600.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [43200.0, 1.0], [44000.0, 3.0], [44400.0, 2.0], [45600.0, 3.0], [46400.0, 4.0], [46000.0, 2.0], [45200.0, 1.0], [47600.0, 8.0], [48000.0, 9.0], [48800.0, 7.0], [48400.0, 8.0], [47200.0, 7.0], [50000.0, 7.0], [49200.0, 5.0], [49600.0, 4.0], [50800.0, 14.0], [50400.0, 11.0], [51200.0, 12.0], [52000.0, 11.0], [53200.0, 23.0], [52800.0, 19.0], [52400.0, 19.0], [51600.0, 14.0], [53600.0, 9.0], [54800.0, 21.0], [54400.0, 16.0], [54000.0, 14.0], [55200.0, 7.0], [56400.0, 10.0], [56000.0, 9.0], [55600.0, 9.0], [57200.0, 8.0], [56800.0, 6.0], [58800.0, 4.0], [57600.0, 6.0], [58000.0, 5.0], [58400.0, 3.0], [59200.0, 4.0], [59600.0, 2.0], [60400.0, 4.0], [60800.0, 3.0], [33500.0, 3.0], [33900.0, 1.0], [34300.0, 1.0], [36300.0, 2.0], [36700.0, 2.0], [35900.0, 2.0], [39900.0, 1.0], [40700.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [42700.0, 1.0], [43500.0, 3.0], [43100.0, 3.0], [44300.0, 1.0], [44700.0, 1.0], [45100.0, 4.0], [47100.0, 6.0], [45500.0, 3.0], [46700.0, 1.0], [45900.0, 2.0], [46300.0, 5.0], [47500.0, 4.0], [48700.0, 10.0], [47900.0, 7.0], [49100.0, 13.0], [48300.0, 4.0], [49900.0, 10.0], [50300.0, 15.0], [50700.0, 9.0], [51100.0, 10.0], [49500.0, 9.0], [52300.0, 13.0], [51900.0, 15.0], [52700.0, 21.0], [51500.0, 15.0], [53100.0, 13.0], [53900.0, 12.0], [53500.0, 17.0], [54700.0, 16.0], [54300.0, 6.0], [55100.0, 16.0], [56300.0, 9.0], [57100.0, 10.0], [55500.0, 11.0], [55900.0, 13.0], [56700.0, 5.0], [57500.0, 10.0], [58300.0, 7.0], [57900.0, 3.0], [58700.0, 10.0], [59100.0, 3.0], [59500.0, 2.0], [60300.0, 2.0], [61100.0, 2.0], [59900.0, 1.0], [17300.0, 1.0], [16500.0, 3.0], [16700.0, 1.0], [17500.0, 3.0], [17700.0, 1.0], [18300.0, 1.0], [18700.0, 2.0], [19300.0, 2.0], [18500.0, 1.0], [19100.0, 1.0], [19500.0, 3.0], [20100.0, 2.0], [19700.0, 1.0], [20500.0, 2.0], [21500.0, 2.0], [21900.0, 1.0], [22700.0, 1.0], [25300.0, 1.0], [26100.0, 1.0], [26700.0, 1.0], [27300.0, 1.0], [27500.0, 1.0], [27900.0, 2.0], [28500.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [28900.0, 2.0], [28700.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [29700.0, 1.0], [30100.0, 2.0], [31100.0, 1.0], [31700.0, 3.0], [32300.0, 2.0], [32100.0, 1.0], [32700.0, 1.0], [32500.0, 1.0], [34600.0, 1.0], [33400.0, 1.0], [33800.0, 2.0], [36200.0, 2.0], [36600.0, 2.0], [35000.0, 1.0], [35400.0, 1.0], [37800.0, 2.0], [37000.0, 1.0], [41000.0, 1.0], [41400.0, 1.0], [43400.0, 2.0], [44200.0, 2.0], [44600.0, 2.0], [43800.0, 1.0], [46200.0, 2.0], [47000.0, 6.0], [45800.0, 2.0], [46600.0, 5.0], [45400.0, 1.0], [47400.0, 6.0], [47800.0, 8.0], [48600.0, 8.0], [49000.0, 3.0], [48200.0, 5.0], [49800.0, 11.0], [50200.0, 10.0], [51000.0, 14.0], [50600.0, 11.0], [49400.0, 9.0], [51400.0, 10.0], [52600.0, 15.0], [51800.0, 13.0], [52200.0, 17.0], [53000.0, 18.0], [54600.0, 27.0], [55000.0, 12.0], [53400.0, 16.0], [53800.0, 7.0], [54200.0, 16.0], [55800.0, 9.0], [56600.0, 9.0], [56200.0, 7.0], [57000.0, 7.0], [55400.0, 1.0], [57400.0, 10.0], [57800.0, 6.0], [58200.0, 7.0], [58600.0, 6.0], [59000.0, 2.0], [59400.0, 3.0], [59800.0, 4.0], [60200.0, 3.0], [60600.0, 2.0], [61800.0, 1.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1406.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1594.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1594.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1406.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 54.44444444444444, "minX": 1.6969242E12, "maxY": 260.658743633277, "series": [{"data": [[1.69692432E12, 260.24358974358995], [1.6969245E12, 258.8820326678767], [1.6969242E12, 54.44444444444444], [1.69692438E12, 260.658743633277], [1.69692456E12, 99.07106598984781], [1.69692426E12, 247.12643678160921], [1.69692444E12, 260.3126050420167]], "isOverall": false, "label": "Performance Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69692456E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2113.0, "minX": 1.0, "maxY": 60809.0, "series": [{"data": [[2.0, 52129.0], [3.0, 52002.0], [4.0, 51702.0], [6.0, 52603.5], [7.0, 52102.0], [8.0, 52991.0], [10.0, 52017.5], [11.0, 51952.0], [12.0, 53192.0], [14.0, 52339.5], [15.0, 52369.0], [16.0, 51431.0], [17.0, 52873.0], [18.0, 27509.0], [19.0, 27123.5], [20.0, 53714.0], [21.0, 52682.0], [22.0, 53240.0], [23.0, 52811.0], [24.0, 53277.0], [25.0, 52988.0], [26.0, 53755.0], [27.0, 52745.0], [28.0, 55876.0], [29.0, 54863.0], [30.0, 53025.0], [31.0, 53698.0], [33.0, 53247.0], [32.0, 53108.0], [34.0, 52973.0], [37.0, 55571.0], [36.0, 53909.5], [39.0, 55292.0], [38.0, 54775.0], [41.0, 53761.0], [40.0, 53666.0], [43.0, 53110.0], [42.0, 54640.0], [45.0, 52929.0], [44.0, 52865.0], [47.0, 54601.0], [46.0, 54041.0], [49.0, 28389.5], [48.0, 53403.0], [50.0, 28722.5], [51.0, 52882.0], [53.0, 53685.0], [52.0, 53212.0], [55.0, 51962.0], [54.0, 59627.0], [56.0, 28741.0], [57.0, 59910.0], [59.0, 51382.0], [58.0, 60497.0], [61.0, 52299.0], [60.0, 60552.0], [63.0, 29119.5], [62.0, 59226.0], [67.0, 60809.0], [66.0, 60413.0], [65.0, 59834.0], [64.0, 58750.0], [68.0, 29744.5], [71.0, 58213.0], [70.0, 58951.0], [69.0, 58359.0], [74.0, 33078.0], [75.0, 58607.0], [73.0, 59394.5], [79.0, 57682.0], [78.0, 58337.0], [77.0, 57352.0], [76.0, 57569.0], [83.0, 57783.0], [82.0, 58593.0], [81.0, 57739.0], [80.0, 58649.0], [87.0, 56698.0], [86.0, 55131.0], [85.0, 57570.0], [84.0, 58229.0], [91.0, 57185.0], [90.0, 56523.0], [89.0, 56492.0], [88.0, 55994.0], [93.0, 32883.0], [95.0, 55724.0], [94.0, 58742.0], [92.0, 56516.0], [99.0, 54438.0], [98.0, 56415.0], [97.0, 55560.0], [96.0, 55661.0], [103.0, 53093.0], [102.0, 54759.0], [101.0, 54230.0], [100.0, 54945.0], [107.0, 53102.0], [106.0, 54980.0], [111.0, 31291.0], [110.0, 54371.0], [109.0, 53005.0], [108.0, 54627.0], [114.0, 32035.0], [113.0, 24830.333333333336], [115.0, 52273.0], [112.0, 51996.0], [117.0, 31144.5], [118.0, 31910.5], [119.0, 30870.0], [116.0, 51707.0], [121.0, 30101.0], [120.0, 36912.5], [123.0, 50240.0], [122.0, 49564.0], [126.0, 35538.5], [125.0, 30073.5], [127.0, 58275.0], [124.0, 49406.0], [128.0, 13141.0], [129.0, 13188.0], [133.0, 35675.5], [135.0, 57709.0], [134.0, 58325.0], [132.0, 58809.0], [131.0, 47087.0], [130.0, 54678.333333333336], [140.0, 35765.5], [143.0, 35591.0], [142.0, 57416.0], [141.0, 57471.0], [139.0, 57745.0], [138.0, 58770.0], [137.0, 58295.0], [136.0, 57336.0], [149.0, 14417.0], [151.0, 55962.0], [150.0, 56490.0], [148.0, 57295.0], [147.0, 56773.0], [145.0, 55231.0], [144.0, 56770.0], [154.0, 28905.0], [155.0, 35480.5], [158.0, 35549.0], [159.0, 35163.0], [157.0, 56024.0], [156.0, 54987.0], [153.0, 55163.0], [152.0, 55728.0], [163.0, 28837.333333333336], [162.0, 35186.0], [167.0, 53599.0], [166.0, 53533.0], [165.0, 54075.0], [164.0, 54452.0], [161.0, 54981.0], [160.0, 54534.0], [169.0, 35281.0], [170.0, 34789.5], [172.0, 29440.333333333336], [174.0, 34567.0], [175.0, 51556.0], [173.0, 52877.0], [171.0, 53439.0], [168.0, 52464.0], [177.0, 34616.25], [180.0, 21959.5], [179.0, 25215.75], [178.0, 25975.0], [181.0, 34972.5], [183.0, 34238.5], [182.0, 50195.0], [185.0, 26781.75], [184.0, 28064.666666666664], [186.0, 29005.666666666664], [189.0, 25279.4], [191.0, 48994.0], [190.0, 48313.0], [188.0, 47910.0], [187.0, 49116.0], [192.0, 29234.666666666664], [194.0, 29233.333333333336], [193.0, 34616.0], [199.0, 47299.0], [198.0, 47592.0], [197.0, 47809.0], [196.0, 47217.0], [195.0, 49179.0], [201.0, 32640.5], [205.0, 40813.0], [204.0, 39367.5], [203.0, 30836.5], [202.0, 33745.0], [207.0, 59292.0], [206.0, 44505.0], [200.0, 45504.0], [215.0, 33647.333333333336], [214.0, 58448.0], [213.0, 58654.0], [212.0, 57049.0], [211.0, 56996.0], [210.0, 58000.0], [209.0, 57012.0], [208.0, 57636.0], [221.0, 39648.0], [220.0, 40346.0], [222.0, 22444.0], [223.0, 56799.0], [219.0, 58017.0], [218.0, 57983.0], [217.0, 57599.0], [216.0, 57420.0], [230.0, 39855.0], [231.0, 57174.0], [229.0, 55177.0], [228.0, 57539.0], [227.0, 56537.0], [226.0, 57824.0], [225.0, 55737.0], [224.0, 55940.0], [234.0, 40425.0], [239.0, 57259.0], [238.0, 57123.0], [237.0, 58210.0], [236.0, 56363.0], [235.0, 55885.0], [233.0, 56596.0], [232.0, 56882.0], [244.0, 49754.40625], [247.0, 26482.741573033705], [246.0, 46313.535714285725], [245.0, 48072.89473684211], [243.0, 52194.88888888889], [242.0, 52886.416666666664], [241.0, 52350.0], [240.0, 52748.0], [249.0, 18981.43820224719], [255.0, 24150.55555555556], [254.0, 25498.23943661972], [253.0, 28278.692307692305], [252.0, 23506.771084337346], [251.0, 24902.621052631577], [250.0, 32357.69230769231], [248.0, 27171.800000000003], [270.0, 24549.988235294117], [257.0, 25046.47222222222], [262.0, 24971.61538461539], [261.0, 25209.571428571424], [260.0, 21763.453488372088], [263.0, 18678.59493670885], [256.0, 28302.369047619042], [271.0, 29063.35087719298], [269.0, 19420.437499999993], [268.0, 19793.918604651168], [259.0, 32467.169230769225], [258.0, 16736.777777777774], [267.0, 21684.494505494513], [266.0, 20819.71641791046], [265.0, 24680.984615384612], [264.0, 19280.058139534896], [272.0, 26614.624999999996], [277.0, 17688.41891891892], [281.0, 16942.76666666667], [282.0, 35332.166666666664], [283.0, 18621.0], [280.0, 11196.825], [279.0, 24615.63333333333], [278.0, 20133.326530612245], [276.0, 26306.325581395347], [275.0, 18068.525423728814], [284.0, 2113.0], [274.0, 22809.685185185186], [273.0, 29461.339285714283], [1.0, 52725.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}, {"data": [[246.98566666666662, 27106.239333333353]], "isOverall": false, "label": "myABFlex Load Test-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 284.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17.7, "minX": 1.6969242E12, "maxY": 20158.5, "series": [{"data": [[1.69692432E12, 20158.5], [1.6969245E12, 17552.0], [1.6969242E12, 181.8], [1.69692438E12, 19058.8], [1.69692456E12, 3979.4], [1.69692426E12, 13106.7], [1.69692444E12, 19041.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69692432E12, 584.1], [1.6969245E12, 536.9], [1.6969242E12, 17.7], [1.69692438E12, 548.7], [1.69692456E12, 387.43333333333334], [1.69692426E12, 487.73333333333335], [1.69692444E12, 572.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69692456E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5362.222222222223, "minX": 1.6969242E12, "maxY": 54253.99492385786, "series": [{"data": [[1.69692432E12, 25382.80128205128], [1.6969245E12, 28786.471869328485], [1.6969242E12, 5362.222222222223], [1.69692438E12, 26128.714770797953], [1.69692456E12, 54253.99492385786], [1.69692426E12, 18084.42988505748], [1.69692444E12, 26261.625210084025]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69692456E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5359.888888888888, "minX": 1.6969242E12, "maxY": 54249.56345177664, "series": [{"data": [[1.69692432E12, 24291.030448717942], [1.6969245E12, 27734.526315789484], [1.6969242E12, 5359.888888888888], [1.69692438E12, 25033.70628183363], [1.69692456E12, 54249.56345177664], [1.69692426E12, 17141.48045977011], [1.69692444E12, 25200.83529411762]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69692456E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.6969242E12, "maxY": 1295.8421052631575, "series": [{"data": [[1.69692432E12, 1263.746794871794], [1.6969245E12, 1261.1197822141567], [1.6969242E12, 13.333333333333334], [1.69692438E12, 1295.8421052631575], [1.69692456E12, 388.964467005076], [1.69692426E12, 955.4137931034483], [1.69692444E12, 1268.7025210084028]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69692456E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1727.0, "minX": 1.6969242E12, "maxY": 61867.0, "series": [{"data": [[1.69692432E12, 61867.0], [1.6969245E12, 61128.0], [1.6969242E12, 9089.0], [1.69692438E12, 59631.0], [1.69692456E12, 61178.0], [1.69692426E12, 47197.0], [1.69692444E12, 57587.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69692432E12, 54805.6], [1.6969245E12, 59348.2], [1.6969242E12, 9089.0], [1.69692438E12, 56177.0], [1.69692456E12, 58615.4], [1.69692426E12, 43160.2], [1.69692444E12, 54804.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69692432E12, 58150.51999999996], [1.6969245E12, 60832.26], [1.6969242E12, 9089.0], [1.69692438E12, 58969.2], [1.69692456E12, 60816.380000000005], [1.69692426E12, 45480.759999999995], [1.69692444E12, 57019.399999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69692432E12, 55764.3], [1.6969245E12, 60187.6], [1.6969242E12, 9089.0], [1.69692438E12, 57217.0], [1.69692456E12, 59314.9], [1.69692426E12, 44190.65], [1.69692444E12, 55665.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69692432E12, 43142.0], [1.6969245E12, 44505.0], [1.6969242E12, 1727.0], [1.69692438E12, 46524.0], [1.69692456E12, 47087.0], [1.69692426E12, 10735.0], [1.69692444E12, 45277.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69692432E12, 51003.0], [1.6969245E12, 56608.0], [1.6969242E12, 5421.0], [1.69692438E12, 53135.0], [1.69692456E12, 53714.0], [1.69692426E12, 31769.0], [1.69692444E12, 51824.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69692456E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2056.0, "minX": 1.0, "maxY": 55786.5, "series": [{"data": [[2.0, 50588.5], [8.0, 50680.5], [9.0, 53901.0], [10.0, 53068.0], [11.0, 55786.5], [3.0, 52375.0], [12.0, 53977.0], [13.0, 51238.0], [14.0, 51824.0], [15.0, 51136.0], [1.0, 48325.0], [4.0, 51432.0], [16.0, 52496.0], [17.0, 51063.5], [18.0, 54373.0], [19.0, 48798.0], [5.0, 52460.0], [20.0, 28695.0], [21.0, 53034.0], [22.0, 52002.0], [6.0, 53215.0], [7.0, 49493.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 2075.0], [10.0, 2067.5], [11.0, 2074.0], [12.0, 2073.0], [3.0, 2056.0], [13.0, 2072.5], [14.0, 2071.0], [15.0, 2074.5], [16.0, 2072.0], [1.0, 3573.0], [17.0, 2069.0], [18.0, 2069.0], [19.0, 2071.0], [20.0, 2074.0], [5.0, 2067.0], [21.0, 2081.0], [22.0, 2066.0], [6.0, 2067.0], [7.0, 2066.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 55780.5, "series": [{"data": [[2.0, 50582.0], [8.0, 50679.5], [9.0, 53898.0], [10.0, 53067.0], [11.0, 55780.5], [3.0, 52374.0], [12.0, 53977.0], [13.0, 51235.0], [14.0, 51823.0], [15.0, 51135.5], [1.0, 48323.5], [4.0, 51426.5], [16.0, 52492.0], [17.0, 51063.0], [18.0, 54373.0], [19.0, 48787.5], [5.0, 52449.0], [20.0, 28687.0], [21.0, 53025.0], [22.0, 52000.0], [6.0, 53214.0], [7.0, 49493.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [3.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [5.0, 0.0], [21.0, 0.0], [22.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8833333333333333, "minX": 1.6969242E12, "maxY": 10.0, "series": [{"data": [[1.69692432E12, 10.0], [1.6969245E12, 8.116666666666667], [1.6969242E12, 1.8833333333333333], [1.69692438E12, 10.0], [1.69692426E12, 10.0], [1.69692444E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6969245E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6969242E12, "maxY": 5.45, "series": [{"data": [[1.69692432E12, 4.95], [1.6969245E12, 4.55], [1.6969242E12, 0.15], [1.69692438E12, 4.65], [1.69692456E12, 3.283333333333333], [1.69692426E12, 4.133333333333334], [1.69692444E12, 4.85]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69692432E12, 5.45], [1.6969245E12, 4.633333333333334], [1.69692438E12, 5.166666666666667], [1.69692426E12, 3.1166666666666667], [1.69692444E12, 5.066666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69692456E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6969242E12, "maxY": 5.45, "series": [{"data": [[1.69692432E12, 4.95], [1.6969245E12, 4.55], [1.6969242E12, 0.15], [1.69692438E12, 4.65], [1.69692456E12, 3.283333333333333], [1.69692426E12, 4.133333333333334], [1.69692444E12, 4.85]], "isOverall": false, "label": "myABFlex Load Test-success", "isController": false}, {"data": [[1.69692432E12, 5.45], [1.6969245E12, 4.633333333333334], [1.69692438E12, 5.166666666666667], [1.69692426E12, 3.1166666666666667], [1.69692444E12, 5.066666666666666]], "isOverall": false, "label": "myABFlex Load Test-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69692456E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6969242E12, "maxY": 5.45, "series": [{"data": [[1.69692432E12, 4.95], [1.6969245E12, 4.55], [1.6969242E12, 0.15], [1.69692438E12, 4.65], [1.69692456E12, 3.283333333333333], [1.69692426E12, 4.133333333333334], [1.69692444E12, 4.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69692432E12, 5.45], [1.6969245E12, 4.633333333333334], [1.69692438E12, 5.166666666666667], [1.69692426E12, 3.1166666666666667], [1.69692444E12, 5.066666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69692456E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

